package pqt.dss.illustration.model.am;

import java.sql.SQLException;

import java.sql.Types;

import javax.faces.application.FacesMessage;

import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jdbc.internal.OracleCallableStatement;
import oracle.sql.NUMBER;
import oracle.jbo.domain.Number;

import pqt.dss.illustration.model.am.common.dssIllustrationAM;
import pqt.dss.illustration.model.am.dssIllustrationAMImpl;
import pqt.dss.illustration.model.vo.DssIllustrationHdViewImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Oct 29 14:46:40 PKT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class dssIllustrationAMImpl extends ApplicationModuleImpl implements dssIllustrationAM {
    /**
     * This is the default constructor (do not remove).
     */
    public dssIllustrationAMImpl() {
    }

    /**
     * Container's getter for DssIllustrationHdView2.
     * @return DssIllustrationHdView2
     */
    public DssIllustrationHdViewImpl getDssIllustrationHdView2() {
        return (DssIllustrationHdViewImpl) findViewObject("DssIllustrationHdView2");
    }

    /**
     * Container's getter for DssIllustrationComView1.
     * @return DssIllustrationComView1
     */
    public ViewObjectImpl getDssIllustrationComView1() {
        return (ViewObjectImpl) findViewObject("DssIllustrationComView1");
    }

    /**
     * Container's getter for DssIllustrationDtView1.
     * @return DssIllustrationDtView1
     */
    public ViewObjectImpl getDssIllustrationDtView1() {
        return (ViewObjectImpl) findViewObject("DssIllustrationDtView1");
    }
    
    public void Apply() {
        if (getDBTransaction().isDirty()) {
            getDBTransaction().commit();
            FacesMessage Message = new FacesMessage("Record Saved Successfully!");
            Message.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, Message);
        }
    }

    public void Rollback() {
        getDBTransaction().rollback();
    }
    public ViewObjectImpl getFromUserVO1() {
        return (ViewObjectImpl) findViewObject("FromUserVO1");
    }

    public void DeleteCommit() {
        if (getDBTransaction().isDirty()) {
            getDBTransaction().commit();
            FacesMessage Message = new FacesMessage("Record has been deleted Successfully!");
            Message.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, Message);
        }
    
    }
    public dssIllustrationAMImpl DssIllustrationHdView2() {
          return (dssIllustrationAMImpl) findViewObject("DssIllustrationHdView2");
      }
    public ViewObjectImpl getWfSetupDetailVO1() {
            return (ViewObjectImpl) findViewObject("WfSetupDetailVO1");
        }
    public void callWorkflow(Number p_document_id, String ApprovalType) {
            NUMBER vNotifId;
            Number p_wf_notif_id = null, p_wf_setup_id = null, p_form_id = null, p_from_user_id = null;
            String p_notification_message = "Approval Required for Special Illustration Request.", p_status = null;

            ViewObject WfVO = this.getWfSetupDetailVO1();
            WfVO.setWhereClause("WORKFLOW_TYPE='" + ApprovalType + "'");
            WfVO.executeQuery();
            if (WfVO.getRowCount() == 0) {
                throw new JboException("Workflow Hierarchy does not exists.");
            } else if (WfVO.getRowCount() > 1) {
                throw new JboException("Multiple Workflow Hierarchy exists.");
            } else if (WfVO.getRowCount() == 1) {
                p_wf_setup_id = (Number) WfVO.first().getAttribute(0);
                p_form_id = (Number) WfVO.first().getAttribute(1);

                ViewObject vo = this.getDssIllustrationHdView2();
                if (vo.getRowCount() == 0) {
                    throw new JboException("Please select Agent for Special Illustration Request.");
                } else if (vo.getRowCount() > 0) {
                    ViewObject FU = this.getFromUserVO1();
                    FU.setWhereClause("USER_ID_PK= " + vo.first().getAttribute("UserIdFk"));
                    FU.executeQuery();
                    if (FU.getRowCount() == 1) {
                        p_from_user_id = (Number) FU.first().getAttribute(1);
                    } else if (FU.getRowCount() == 0) {
                        throw new JboException("Manager does not exists.");
                    } else if (FU.getRowCount() > 1) {
                        throw new JboException("Multiple Manager exists.");
                    }
                }

                DBTransaction txn = getDBTransaction();
                OracleCallableStatement callableStatement = null;
                if ("BRANCH".equalsIgnoreCase(ApprovalType))
                    callableStatement =
                        (OracleCallableStatement) txn.createCallableStatement("BEGIN DSS_SWF_PKG.CALL_WORKFLOW(:1, :2, :3, :4, :5, :6, :7, :8); END;",
                                                                              DBTransaction.DEFAULT);
                else if ("DSS".equalsIgnoreCase(ApprovalType))
                    callableStatement =
                        (OracleCallableStatement) txn.createCallableStatement("BEGIN DSS_SWF_PKG.CALL_DSS_WORKFLOW(:1, :2, :3, :4, :5, :6, :7, :8); END;",
                                                                              DBTransaction.DEFAULT);
                try {
                    callableStatement.setNUMBER(1, (NUMBER) p_document_id);
                    callableStatement.setNUMBER(2, (NUMBER) p_wf_notif_id);
                    callableStatement.setNUMBER(3, (NUMBER) p_wf_setup_id);
                    callableStatement.setNUMBER(4, p_form_id);
                    callableStatement.setNUMBER(5, p_from_user_id);
                    callableStatement.setString(6, p_notification_message);
                    callableStatement.setString(7, p_status);
                    callableStatement.registerOutParameter(8, Types.NUMERIC);

                    callableStatement.execute();
                    vNotifId = callableStatement.getNUMBER(8);
                    callableStatement.close();
                    if (vNotifId != null) {
                        if ("BRANCH".equalsIgnoreCase(ApprovalType)) {
                            this.getDssIllustrationHdView2().getCurrentRow().setAttribute("BranchStatus", "INPROCESS");
                            this.getDssIllustrationHdView2().getCurrentRow().setAttribute("BranchNotifIdFk", vNotifId);
                        } else if ("DSS".equalsIgnoreCase(ApprovalType)) {
                            this.getDssIllustrationHdView2().getCurrentRow().setAttribute("DssStatus", "INPROCESS");
                            this.getDssIllustrationHdView2().getCurrentRow().setAttribute("DssNotifIdFk", vNotifId);
                        }
                        getDBTransaction().commit();
                    }
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
            this.getDssIllustrationHdView2().executeQuery();
        }

        public void DssApprove() {
            ViewObject vo = this.getDssIllustrationHdView2();
            vo.getCurrentRow().setAttribute("DssStatus", "APPROVED");
            getDBTransaction().commit();
        }
    /**
     * Container's getter for DssIllustrationRpView1.
     * @return DssIllustrationRpView1
     */
    public ViewObjectImpl getDssIllustrationRpView1() {
        return (ViewObjectImpl) findViewObject("DssIllustrationRpView1");
    }

    /**
     * Container's getter for DssIllustrationSrView1.
     * @return DssIllustrationSrView1
     */
    public ViewObjectImpl getDssIllustrationSrView1() {
        return (ViewObjectImpl) findViewObject("DssIllustrationSrView1");
    }

    /**
     * Container's getter for hd_N_com1.
     * @return hd_N_com1
     */
    public ViewLinkImpl gethd_N_com1() {
        return (ViewLinkImpl) findViewLink("hd_N_com1");
    }

    /**
     * Container's getter for hd_N_dt1.
     * @return hd_N_dt1
     */
    public ViewLinkImpl gethd_N_dt1() {
        return (ViewLinkImpl) findViewLink("hd_N_dt1");
    }

    /**
     * Container's getter for hd_N_rp1.
     * @return hd_N_rp1
     */
    public ViewLinkImpl gethd_N_rp1() {
        return (ViewLinkImpl) findViewLink("hd_N_rp1");
    }

    /**
     * Container's getter for hd_N_sr1.
     * @return hd_N_sr1
     */
    public ViewLinkImpl gethd_N_sr1() {
        return (ViewLinkImpl) findViewLink("hd_N_sr1");
    }
    public void callIllustrationWorkflow(Number p_document_id) {
            String vStatus = null, vMsg = null;

            DBTransaction txn = getDBTransaction();
            OracleCallableStatement callableStatement = null;

            callableStatement =
                (OracleCallableStatement) txn.createCallableStatement("BEGIN dss_all_pkg.CALL_ILLUSTRATION_WORKFLOW(:1, :2, :3); END;",
                                                                      DBTransaction.DEFAULT);

            try {
                callableStatement.setNUMBER(1, (NUMBER) p_document_id);
                callableStatement.registerOutParameter(2, Types.VARCHAR);
                callableStatement.registerOutParameter(3, Types.VARCHAR);

                callableStatement.execute();

                vStatus = callableStatement.getString(2);
                vMsg = callableStatement.getString(3);

                callableStatement.close();
            } catch (SQLException e) {
                try {
                    callableStatement.close();
                } catch (SQLException f) {
                }
                throw new JboException(e.getMessage());
            }

            FacesMessage Message = new FacesMessage(vMsg);
            if (vStatus.equalsIgnoreCase("N"))
                Message.setSeverity(FacesMessage.SEVERITY_ERROR);
            else
                Message.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, Message);
            txn.rollback();
        }
}

