package pqt.dss.illustration.model.eo;

import java.sql.SQLException;

import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import javax.servlet.http.HttpSession;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Oct 04 14:39:20 PKT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DssIllustrationSrImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        HdIdFk,
        RegularContribution,
        ModeOfContribution,
        ContributionIndexRate,
        PaymentTerm,
        ProjectionTerm,
        TopupAmount,
        UserIdFk,
        EnterDate,
        LastUpdatedBy,
        LastUpdatedDate,
        SrIdPk,
        DssIllustrationHd;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int HDIDFK = AttributesEnum.HdIdFk.index();
    public static final int REGULARCONTRIBUTION = AttributesEnum.RegularContribution.index();
    public static final int MODEOFCONTRIBUTION = AttributesEnum.ModeOfContribution.index();
    public static final int CONTRIBUTIONINDEXRATE = AttributesEnum.ContributionIndexRate.index();
    public static final int PAYMENTTERM = AttributesEnum.PaymentTerm.index();
    public static final int PROJECTIONTERM = AttributesEnum.ProjectionTerm.index();
    public static final int TOPUPAMOUNT = AttributesEnum.TopupAmount.index();
    public static final int USERIDFK = AttributesEnum.UserIdFk.index();
    public static final int ENTERDATE = AttributesEnum.EnterDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int SRIDPK = AttributesEnum.SrIdPk.index();
    public static final int DSSILLUSTRATIONHD = AttributesEnum.DssIllustrationHd.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DssIllustrationSrImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("pqt.dss.illustration.model.eo.DssIllustrationSr");
    }


    /**
     * Gets the attribute value for HdIdFk, using the alias name HdIdFk.
     * @return the value of HdIdFk
     */
    public Number getHdIdFk() {
        return (Number) getAttributeInternal(HDIDFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for HdIdFk.
     * @param value value to set the HdIdFk
     */
    public void setHdIdFk(Number value) {
        setAttributeInternal(HDIDFK, value);
    }

    /**
     * Gets the attribute value for RegularContribution, using the alias name RegularContribution.
     * @return the value of RegularContribution
     */
    public String getRegularContribution() {
        return (String) getAttributeInternal(REGULARCONTRIBUTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for RegularContribution.
     * @param value value to set the RegularContribution
     */
    public void setRegularContribution(String value) {
        setAttributeInternal(REGULARCONTRIBUTION, value);
    }

    /**
     * Gets the attribute value for ModeOfContribution, using the alias name ModeOfContribution.
     * @return the value of ModeOfContribution
     */
    public String getModeOfContribution() {
        return (String) getAttributeInternal(MODEOFCONTRIBUTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for ModeOfContribution.
     * @param value value to set the ModeOfContribution
     */
    public void setModeOfContribution(String value) {
        setAttributeInternal(MODEOFCONTRIBUTION, value);
    }

    /**
     * Gets the attribute value for ContributionIndexRate, using the alias name ContributionIndexRate.
     * @return the value of ContributionIndexRate
     */
    public Number getContributionIndexRate() {
        return (Number) getAttributeInternal(CONTRIBUTIONINDEXRATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContributionIndexRate.
     * @param value value to set the ContributionIndexRate
     */
    public void setContributionIndexRate(Number value) {
        setAttributeInternal(CONTRIBUTIONINDEXRATE, value);
    }

    /**
     * Gets the attribute value for PaymentTerm, using the alias name PaymentTerm.
     * @return the value of PaymentTerm
     */
    public Number getPaymentTerm() {
        return (Number) getAttributeInternal(PAYMENTTERM);
    }

    /**
     * Sets <code>value</code> as the attribute value for PaymentTerm.
     * @param value value to set the PaymentTerm
     */
    public void setPaymentTerm(Number value) {
        setAttributeInternal(PAYMENTTERM, value);
    }

    /**
     * Gets the attribute value for ProjectionTerm, using the alias name ProjectionTerm.
     * @return the value of ProjectionTerm
     */
    public Number getProjectionTerm() {
        return (Number) getAttributeInternal(PROJECTIONTERM);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProjectionTerm.
     * @param value value to set the ProjectionTerm
     */
    public void setProjectionTerm(Number value) {
        setAttributeInternal(PROJECTIONTERM, value);
    }

    /**
     * Gets the attribute value for TopupAmount, using the alias name TopupAmount.
     * @return the value of TopupAmount
     */
    public Number getTopupAmount() {
        return (Number) getAttributeInternal(TOPUPAMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for TopupAmount.
     * @param value value to set the TopupAmount
     */
    public void setTopupAmount(Number value) {
        setAttributeInternal(TOPUPAMOUNT, value);
    }

    /**
     * Gets the attribute value for UserIdFk, using the alias name UserIdFk.
     * @return the value of UserIdFk
     */
    public Number getUserIdFk() {
        return (Number) getAttributeInternal(USERIDFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for UserIdFk.
     * @param value value to set the UserIdFk
     */
    public void setUserIdFk(Number value) {
        setAttributeInternal(USERIDFK, value);
    }

    /**
     * Gets the attribute value for EnterDate, using the alias name EnterDate.
     * @return the value of EnterDate
     */
    public Date getEnterDate() {
        return (Date) getAttributeInternal(ENTERDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for EnterDate.
     * @param value value to set the EnterDate
     */
    public void setEnterDate(Date value) {
        setAttributeInternal(ENTERDATE, value);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the value of LastUpdatedBy
     */
    public Number getLastUpdatedBy() {
        return (Number) getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedBy.
     * @param value value to set the LastUpdatedBy
     */
    public void setLastUpdatedBy(Number value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**
     * Gets the attribute value for LastUpdatedDate, using the alias name LastUpdatedDate.
     * @return the value of LastUpdatedDate
     */
    public Date getLastUpdatedDate() {
        return (Date) getAttributeInternal(LASTUPDATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedDate.
     * @param value value to set the LastUpdatedDate
     */
    public void setLastUpdatedDate(Date value) {
        setAttributeInternal(LASTUPDATEDDATE, value);
    }

    /**
     * Gets the attribute value for SrIdPk, using the alias name SrIdPk.
     * @return the value of SrIdPk
     */
    public Number getSrIdPk() {
        return (Number) getAttributeInternal(SRIDPK);
    }

    /**
     * Sets <code>value</code> as the attribute value for SrIdPk.
     * @param value value to set the SrIdPk
     */
    public void setSrIdPk(Number value) {
        setAttributeInternal(SRIDPK, value);
    }

    /**
     * @return the associated entity DssIllustrationHdImpl.
     */
    public DssIllustrationHdImpl getDssIllustrationHd() {
        return (DssIllustrationHdImpl) getAttributeInternal(DSSILLUSTRATIONHD);
    }

    /**
     * Sets <code>value</code> as the associated entity DssIllustrationHdImpl.
     */
    public void setDssIllustrationHd(DssIllustrationHdImpl value) {
        setAttributeInternal(DSSILLUSTRATIONHD, value);
    }


    /**
     * @param srIdPk key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number srIdPk) {
        return new Key(new Object[] { srIdPk });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
        protected void create(AttributeList attributeList) {
                     super.create(attributeList);
                     Date currentDate = new Date();
                     setEnterDate((Date) currentDate.getCurrentDate());
                     setLastUpdatedDate((Date) currentDate.getCurrentDate());
                     SequenceImpl seq = new SequenceImpl("DSS_ILLUSTRATION_SR_SEQ", getDBTransaction());
                     setSrIdPk(seq.getSequenceNumber());
                     FacesContext fctx = FacesContext.getCurrentInstance();
                     ExternalContext ectx = fctx.getExternalContext();
                     HttpSession userSession = (HttpSession) ectx.getSession(false);
                     try {
                         setUserIdFk(new Number(userSession.getAttribute("pUserId")));
                         setLastUpdatedBy(new Number(userSession.getAttribute("pUserId")));
                     } catch (SQLException ex) {
                         setUserIdFk(new Number(0));
                         setLastUpdatedBy(new Number(0));
                     }
                 }
    

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
                Date currentDate = new Date();
                if (operation == DML_UPDATE) {
                    setLastUpdatedDate((Date) currentDate.getCurrentDate());
                    FacesContext fctx = FacesContext.getCurrentInstance();
                    ExternalContext ectx = fctx.getExternalContext();
                    HttpSession userSession = (HttpSession) ectx.getSession(false);
                    try {
                        setUserIdFk(new Number(userSession.getAttribute("pUserId")));
                        setLastUpdatedBy(new Number(userSession.getAttribute("pUserId")));
                    } catch (SQLException ex) {
                        setUserIdFk(new Number(0));
                        setLastUpdatedBy(new Number(0));
                    }
                }
                super.doDML(operation, e);
            }
    }

